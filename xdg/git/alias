#!/bin/sh

set -e
set -u

set -o errexit

success() {
	printf "\e[0;32m%s\e[0m" "${1}"
}

notice() {
	printf "\e[0;33m%s\e[0m" "${1}"
}

whoops() {
	printf "\e[1;31m%s\e[0m" "${1}"
}

display() {
	printf "\e[2m%s\e[22m \e[2m\e[90m|\e[22m\e[0m \e[32m%s\e[0m\n" "${1}" "${2}"
}

display_active() {
	printf "\e[3m%s\e[22m \e[2m\e[90m|\e[22m\e[0m \e[33m%s\e[0m\n" "${1}" "${2}"
}

reverse () {
	awk "{ a[i++] = \$0 } END { for (j=i-1; j>=0;) print a[j--] }"
}

latest_commit_hash() {
	git rev-parse --short HEAD
}

latest_commit_message() {
	git log -1 --pretty=%B
}

current_branch() {
	git symbolic-ref --short HEAD
}

current_remote() {
	remote="$(git rev-parse --abbrev-ref "$(current_branch)@{upstream}")"

	if [ "${remote%%/*}" = "remotes" ]; then
		remote="${remote#*/}"
		echo "${remote%%/*}"
	else
		echo "${remote%%/*}"
	fi
}

all_commits_to_push() {
	git cherry --abbrev -v 2> /dev/null
}

all_commits_to_pull() {
	b="$(current_branch)"
	r="$(current_remote)"

	git fetch --quiet
	git log --left-right --graph --cherry-pick --oneline "${b}"..."${r}"/"${b}"
}

all_commits_to_push_pretty() {
	b="$(current_branch)"

	all_commits_to_push | reverse | awk "{
			hash=\$2
			\$1=\"\"
			\$2=\"\"
			sub(\"^[ \t]+\", \"\")
			printf \" \033[2m\033[90m[\033[22m\033[0m\033[0;32m${b}\033[0m\033[2m\033[90m|\033[22m\033[0m\033[0;33m\" hash \"\033[2m\033[90m]\033[22m\033[0m \033[90m\" \$0 \"\033[39m\n\"
		}"
}

all_commits_to_pull_pretty() {
	b="$(current_branch)"

	all_commits_to_pull | reverse | awk "{
			hash=\$2
			\$1=\"\"
			\$2=\"\"
			sub(\"^[ \t]+\", \"\")
			printf \" \033[2m\033[90m[\033[22m\033[0m\033[0;32m${b}\033[0m\033[2m\033[90m|\033[22m\033[0m\033[0;33m\" hash \"\033[2m\033[90m]\033[22m\033[0m \033[90m\" \$0 \"\033[39m\n\"
		}"
}

status () {
	printf "\e[2m\e[90m[\e[22m\e[0m$(success "$(current_branch)") \e[90m->\e[39m $(success "$(current_remote)/$(current_branch)")\e[2m\e[90m|\e[22m\e[0m$(notice "$(latest_commit_hash)")\e[2m\e[90m]\e[22m\e[0m \e[90m%s\e[39m\n\n" "$(latest_commit_message)"

	git fetch --quiet

	LOCAL="$(git rev-parse "@{0}")"
	REMOTE="$(git rev-parse "@{u}")"
	BASE="$(git merge-base "@{0}" "@{u}")"

	push=0
	pull=0

	if [ "${LOCAL}" != "${REMOTE}" ]; then
		read -r ahead behind <<-EOS
		$(git rev-list --left-right --count "$(current_branch)"..."$(current_remote)"/"$(current_branch)")
		EOS
	fi

	if [ "${LOCAL}" = "${REMOTE}" ]; then
		display "position" "up-to-date with remote"
	elif [ "${LOCAL}" = "${BASE}" ]; then
		 display_active "position" "$(notice "${behind} commits behind remote (pull)")"
		pull=1
	elif [ "${REMOTE}" = "${BASE}" ]; then
		display_active "position" "$(notice "${ahead} commits ahead of remote (push)")"
		push=1
	else
		display_active "position" "$(whoops "diverged from remote") $(whoops_subtext "(${ahead} commits ahead, ${behind} commits behind)")"
		pull=1
		push=1
	fi

	if git diff --exit-code --quiet; then
		display "staging " "all changes staged"
	else
		display_active "staging " "$(notice "not all changes staged (add changes)")"
	fi

	git update-index -q --refresh

	if git diff-index --quiet --cached HEAD; then
		display "commits " "all changes committed"
	else
		display_active "commits " "$(notice "not all changes committed (commit changes)")"
	fi

	if [ "${push}" -eq 1 ] || [ "${pull}" -eq 1 ]; then
		echo
	fi

	if [ "${push}" -eq 1 ]; then
		printf "\n\e[2mcommits ahead (to push):\e[22m\n"
		all_commits_to_push_pretty
	fi

	if [ "${pull}" -eq 1 ]; then
		printf "\n\e[2mcommits behind (to pull):\e[22m\n"
		all_commits_to_pull_pretty
	fi

	git ls-files --other --modified --exclude-standard | awk "
	BEGIN {
		lines = 0;
		split(\"\", output);
	}

	{
		lines ++;
		output[lines] = \$0;
	}

	END {
		if (lines > 0) {
			printf \"\n\033[2mfiles modified:\033[22m\n\"

			for (i = 1; i < lines; i ++) {
				printf \"\033[2m├ \033[22m\"
				printf \"\033[0;32m\" output[i] \"\033[0m\n\"
			}

			printf \"\033[2m└ \033[22m\"
			printf \"\033[0;32m\" output[i] \"\033[0m\n\"
		} else {
			printf \"\n\033[2mno files modified\033[22m\n\"
		}
	}";
}

status_diff() {
	{
		git diff --color --stat="$(($(tput cols || true) - 3))" HEAD | sed '$d; s/^ //'
		git -c color.status=always status -sb
	} | awk -vOFS='' '
		NR == FNR {
			all[i++]       = $0;
			diff_files[$1] = $0;
			next;
		}

		! ($2 in diff_files) {
			print;
			next;
		}

		{
			gsub($2, diff_files[$2]);
			print;
		}

		END {
			if (NR != FNR) {
				exit;
			}

			for (i in all) {
				print all[i];
			}
		}
	'
}

while test "${#}" -ne 0
do
	case "${1}" in
		s|status) status ;;
		d|diff) status_diff ;;
		*) exit 1 ;;
	esac
	shift
done
