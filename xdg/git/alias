#!/bin/sh

set -e
set -u

set -o errexit

success() {
	printf "\e[0;32m%s\e[0m" "${1}"
}

notice() {
	printf "\e[0;33m%s\e[0m" "${1}"
}

whoops() {
	printf "\e[1;31m%s\e[0m" "${1}"
}

display() {
	printf "\e[2m%s\e[22m \e[2m\e[90m|\e[22m\e[0m \e[32m%s\e[0m\n" "${1}" "${2}"
}

display_active() {
	printf "\e[3m%s\e[22m \e[2m\e[90m|\e[22m\e[0m \e[33m%s\e[0m\n" "${1}" "${2}"
}

reverse () {
	awk "{ a[i++] = \$0 } END { for (j=i-1; j>=0;) print a[j--] }"
}

latest_commit_hash() {
	git rev-parse --short HEAD
}

latest_commit_message() {
	git log -1 --pretty=%B
}

current_branch() {
	git symbolic-ref --short HEAD
}

current_remote() {
	remote="$(git rev-parse --abbrev-ref "$(current_branch)@{upstream}")"

	if [ "${remote%%/*}" = "remotes" ]; then
		remote="${remote#*/}"
		echo "${remote%%/*}"
	else
		echo "${remote%%/*}"
	fi
}

all_commits_to_push() {
	git cherry --abbrev -v 2> /dev/null
}

all_commits_to_pull() {
	b="$(current_branch)"
	r="$(current_remote)"

	git fetch --quiet
	git log --left-right --graph --cherry-pick --oneline "${b}"..."${r}"/"${b}"
}

all_commits_to_push_pretty() {
	b="$(current_branch)"

	all_commits_to_push | reverse | awk "{
			hash=\$2
			\$1=\"\"
			\$2=\"\"
			sub(\"^[ \t]+\", \"\")
			printf \" \033[2m\033[90m[\033[22m\033[0m\033[0;32m${b}\033[0m\033[2m\033[90m|\033[22m\033[0m\033[0;33m\" hash \"\033[2m\033[90m]\033[22m\033[0m \033[90m\" \$0 \"\033[39m\n\"
		}"
}

all_commits_to_pull_pretty() {
	b="$(current_branch)"

	all_commits_to_pull | reverse | awk "{
			hash=\$2
			\$1=\"\"
			\$2=\"\"
			sub(\"^[ \t]+\", \"\")
			printf \" \033[2m\033[90m[\033[22m\033[0m\033[0;32m${b}\033[0m\033[2m\033[90m|\033[22m\033[0m\033[0;33m\" hash \"\033[2m\033[90m]\033[22m\033[0m \033[90m\" \$0 \"\033[39m\n\"
		}"
}

status () {
	printf "\e[2m\e[90m[\e[22m\e[0m$(success "$(current_branch)") \e[90m->\e[39m $(success "$(current_remote)/$(current_branch)")\e[2m\e[90m|\e[22m\e[0m$(notice "$(latest_commit_hash)")\e[2m\e[90m]\e[22m\e[0m \e[90m%s\e[39m\n\n" "$(latest_commit_message)"

	git fetch --quiet

	LOCAL="$(git rev-parse "@{0}")"
	REMOTE="$(git rev-parse "@{u}")"
	BASE="$(git merge-base "@{0}" "@{u}")"

	push=0
	pull=0

	if [ "${LOCAL}" != "${REMOTE}" ]; then
		read -r ahead behind <<-EOS
		$(git rev-list --left-right --count "$(current_branch)"..."$(current_remote)"/"$(current_branch)")
		EOS
	fi

	if [ "${LOCAL}" = "${REMOTE}" ]; then
		display "position" "up-to-date with remote"
	elif [ "${LOCAL}" = "${BASE}" ]; then
		 display_active "position" "$(notice "${behind} commits behind remote (pull)")"
		pull=1
	elif [ "${REMOTE}" = "${BASE}" ]; then
		display_active "position" "$(notice "${ahead} commits ahead of remote (push)")"
		push=1
	else
		display_active "position" "$(whoops "diverged from remote") $(whoops_subtext "(${ahead} commits ahead, ${behind} commits behind)")"
		pull=1
		push=1
	fi

	if git diff --exit-code --quiet; then
		display "staging " "all changes staged"
	else
		display_active "staging " "$(notice "not all changes staged (add changes)")"
	fi

	git update-index -q --refresh

	if git diff-index --quiet --cached HEAD; then
		display "commits " "all changes committed"
	else
		display_active "commits " "$(notice "not all changes committed (commit changes)")"
	fi

	if [ "${push}" -eq 1 ] || [ "${pull}" -eq 1 ]; then
		echo
	fi

	if [ "${push}" -eq 1 ]; then
		printf "\n\e[2mcommits ahead (to push):\e[22m\n"
		all_commits_to_push_pretty
	fi

	if [ "${pull}" -eq 1 ]; then
		printf "\n\e[2mcommits behind (to pull):\e[22m\n"
		all_commits_to_pull_pretty
	fi

	git ls-files --other --modified --exclude-standard | awk "
	BEGIN {
		lines = 0;
		split(\"\", output);
	}

	{
		lines ++;
		output[lines] = \$0;
	}

	END {
		if (lines > 0) {
			printf \"\n\033[2mfiles modified:\033[22m\n\"

			for (i = 1; i < lines; i ++) {
				printf \"\033[2m├ \033[22m\"
				printf \"\033[0;32m\" output[i] \"\033[0m\n\"
			}

			printf \"\033[2m└ \033[22m\"
			printf \"\033[0;32m\" output[i] \"\033[0m\n\"
		} else {
			printf \"\n\033[2mno files modified\033[22m\n\"
		}
	}";
}

status_diff() {
	{
		git diff --color --stat="$(($(tput cols || true) - 3))" HEAD | sed '$d; s/^ //'
		git -c color.status=always status -sb
	} | awk -vOFS='' '
		NR == FNR {
			all[i++]       = $0;
			diff_files[$1] = $0;
			next;
		}

		! ($2 in diff_files) {
			print;
			next;
		}

		{
			gsub($2, diff_files[$2]);
			print;
		}

		END {
			if (NR != FNR) {
				exit;
			}

			for (i in all) {
				print all[i];
			}
		}
	'
}

moji () {
   	git                   \
   		-c color.ui=always \
   			log             \
   			--graph         \
   			--decorate      \
   			--abbrev-commit \
   			--date=relative \
   		--pretty=tformat:'%C(red)%h%C(reset)}%C(dim yellow)(%ar)%C(reset)}—}%C(bold cyan)%an%C(reset):}%C(white)%s%C(reset) %C(dim white) %C(bold yellow)%d%C(reset)' \
   	| sed                                        \
			-e "s/:adhesive_bandage:/🩹/g"          \
			-e "s/:alembic:/⚗️/g"                    \
			-e "s/:alien:/👽️/g"                     \
			-e "s/:ambulance:/🚑️/g"                 \
			-e "s/:arrow_down:/⬇️/g"                 \
			-e "s/:arrow_up:/⬆️/g"                   \
			-e "s/:art:/🎨/g"                       \
			-e "s/:beers:/🍻/g"                     \
			-e "s/:bento:/🍱/g"                     \
			-e "s/:bookmark:/🔖/g"                  \
			-e "s/:boom:/💥/g"                      \
			-e "s/:bricks:/🧱/g"                    \
			-e "s/:bug:/🐛/g"                       \
			-e "s/:building_construction:/🏗️/g"      \
			-e "s/:bulb:/💡/g"                      \
			-e "s/:busts_in_silhouette:/👥/g"       \
			-e "s/:camera_flash:/📸/g"              \
			-e "s/:card_file_box:/🗃️/g"              \
			-e "s/:chart_with_upwards_trend:/📈/g"  \
			-e "s/:children_crossing:/🚸/g"         \
			-e "s/:closed_lock_with_key:/🔐/g"      \
			-e "s/:clown_face:/🤡/g"                \
			-e "s/:coffin:/⚰️/g"                     \
			-e "s/:construction:/🚧/g"              \
			-e "s/:construction_worker:/👷/g"       \
			-e "s/:dizzy:/💫/g"                     \
			-e "s/:egg:/🥚/g"                       \
			-e "s/:fire:/🔥/g"                      \
			-e "s/:globe_with_meridians:/🌐/g"      \
			-e "s/:goal_net:/🥅/g"                  \
			-e "s/:green_heart:/💚/g"               \
			-e "s/:hammer:/🔨/g"                    \
			-e "s/:heavy_minus_sign:/➖/g"          \
			-e "s/:heavy_plus_sign:/➕/g"           \
			-e "s/:iphone:/📱/g"                    \
			-e "s/:label:/🏷️/g"                      \
			-e "s/:lipstick:/💄/g"                  \
			-e "s/:lock:/🔒️/g"                      \
			-e "s/:loud_sound:/🔊/g"                \
			-e "s/:mag:/🔍️/g"                       \
			-e "s/:memo:/📝/g"                      \
			-e "s/:monocle_face:/🧐/g"              \
			-e "s/:mute:/🔇/g"                      \
			-e "s/:necktie:/👔/g"                   \
			-e "s/:package:/📦️/g"                   \
			-e "s/:page_facing_up:/📄/g"            \
			-e "s/:passport_control:/🛂/g"          \
			-e "s/:pencil2:/✏️/g"                    \
			-e "s/:poop:/💩/g"                      \
			-e "s/:pushpin:/📌/g"                   \
			-e "s/:recycle:/♻️ /g"                   \
			-e "s/:rewind:/⏪️/g"                    \
			-e "s/:rocket:/🚀/g"                    \
			-e "s/:rotating_light:/🚨/g"            \
			-e "s/:see_no_evil:/🙈/g"               \
			-e "s/:seedling:/🌱/g"                  \
			-e "s/:sparkles:/✨/g"                  \
			-e "s/:speech_balloon:/💬/g"            \
			-e "s/:stethoscope:/🩺/g"               \
			-e "s/:tada:/🎉/g"                      \
			-e "s/:technologist:/🧑‍💻/g"      \
			-e "s/:test_tube:/🧪/g"                 \
			-e "s/:triangular_flag_on_post:/🚩/g"   \
			-e "s/:truck:/🚚/g"                     \
			-e "s/:twisted_rightwards_arrows:/🔀/g" \
			-e "s/:wastebasket:/🗑️/g"                \
			-e "s/:wheelchair:/♿️/g"                \
			-e "s/:white_check_mark:/✅/g"          \
			-e "s/:wrench:/🔧/g"                    \
			-e "s/:zap:/⚡️/g"                       \
		| column -s '}' -t \
		| ${PAGER}
}


while test "${#}" -ne 0
do
	case "${1}" in
		s|status) status ;;
		d|diff) status_diff ;;
		moji) moji ;;
		*) exit 1 ;;
	esac
	shift
done
