#!/bin/sh

set -e
set -u

set -o errexit

branch_exists=0
branch="${1:-}"

if [ "${branch}" != '' ]; then
	if git show-ref refs/heads/"${branch}" >/dev/null 2>&1; then
		branch_exists=1
	fi
fi

if [ "${branch_exists}" = '1' ] && [ "${branch}" != '' ]; then
	printf '\nContribution stats on \033[0;33m%s\033[0m branch:\n\n' "${branch}"
else
	printf '\nContribution stats on current branch:\n\n'
fi

git -c log.showSignature=false log ${branch} \
	--use-mailmap \
	--numstat \
	--pretty='format:commit %H%nAuthor: %aN <%aE>%nDate:   %ad%n%n%w(0,4,4)%B%n' \
	| LC_ALL=C awk '
function red(f, s)     { return sprintf("\033[0;31m" f "\033[0m", s); }
function green(f, s)   { return sprintf("\033[0;32m" f "\033[0m", s); }
function yellow(f, s)  { return sprintf("\033[0;33m" f "\033[0m", s); }
function blue(f, s)    { return sprintf("\033[0;34m" f "\033[0m", s); }
function magenta(f, s) { return sprintf("\033[0;35m" f "\033[0m", s); }

function ltrim(s) { sub(/^[ \t\r\n]+)/, "", s); return s; }
function rtrim(s) { sub(/[ \t\r\n]+)$/, "", s); return s; }
function  trim(s) { return ltrim(rtrim(s)); }

function print_insertions(author) {
	if(stats["Total"]["insertions"] > 0) {
		printf "\t  insertions:    %s\t(%s)\n",          \
			green("%d",     stats[author]["insertions"]), \
			green("%.0f%%", stats[author]["insertions"] / stats["Total"]["insertions"] * 100);
	}
}

function print_deletions(author) {
	if(stats["Total"]["deletions"] > 0) {
		printf "\t  deletions:     %s\t(%s)\n",       \
			red("%d",     stats[author]["deletions"]), \
			red("%.0f%%", stats[author]["deletions"] / stats["Total"]["deletions"] * 100);
	}
}

function print_files(author) {
	if(stats["Total"]["files"] > 0) {
		printf "\t  files:         %s\t(%s)\n",    \
			blue("%d",     stats[author]["files"]), \
			blue("%.0f%%", stats[author]["files"] / stats["Total"]["files"] * 100);
	}
}

function print_commits(author) {
	if(stats["Total"]["commits"] > 0) {
		printf "\t  commits:       %s\t(%s)\n",         \
			magenta("%d",     stats[author]["commits"]), \
			magenta("%.0f%%", stats[author]["commits"] / stats["Total"]["commits"] * 100);
	}
}

function print_lines(author) {
	if ((stats["Total"]["insertions"] + stats["Total"]["deletions"]) * 100 > 0) {
		printf "\t  lines changed: %s\t(%s)\n",                                          \
			yellow("%d",      stats[author]["insertions"] + stats[author]["deletions"]),  \
			yellow("%.0f%%", (stats[author]["insertions"] + stats[author]["deletions"]) / \
				(stats["Total"]["insertions"] + stats["Total"]["deletions"]) * 100);
	} else {
		printf "\t  lines changed: %s\t(0%%)\n", \
			yellow("%d", stats[author]["insertions"] + stats[author]["deletions"]);
	}
}

function print_stats(author) {
	printf "\t%s:\n", author;

	print_insertions(author);
	print_deletions(author);
	print_files(author);
	print_commits(author);

	if (stats[author]["first"] != "") {
		print_lines(author);

		printf "\t  first commit:  %s\n", stats[author]["first"];
		printf "\t  last commit:   %s\n", stats[author]["last"];
	}

	printf "\n";
}

BEGIN {
	split("", stats);
	stats["Total"]["commits"]    = 0;
	stats["Total"]["insertions"] = 0;
	stats["Total"]["deletions"]  = 0;
	stats["Total"]["files"]      = 0;
}

/^Author:/ {
	$1 = "";
	author = trim($0);

	if (!(author in stats)) {
		stats[author]["commits"]    = 0
		stats[author]["insertions"] = 0
		stats[author]["deletions"]  = 0
		stats[author]["files"]      = 0
	}

	stats[author]["commits"]  += 1;
	stats["Total"]["commits"] += 1;
}

/^Date:/ {
	$1="";
	stats[author]["first"] = substr($0, 2);

	if (stats[author]["last"] == "") {
		stats[author]["last"] = stats[author]["first"]
	}
}

/^[0-9]/ {
	stats[author]["insertions"]  += $1;
	stats[author]["deletions"]   += $2;
	stats[author]["files"]       += 1;
	stats["Total"]["insertions"] += $1;
	stats["Total"]["deletions"]  += $2;
	stats["Total"]["files"]      += 1;
}

END {
	for (author in stats) {
		if (author != "Total") {
			print_stats(author);
		}
	}

	print_stats("Total");
}'
